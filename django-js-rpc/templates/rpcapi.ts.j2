import { QueryClient, QueryClientProvider, useQuery, useMutation } from 'react-query';

interface FetchMethod {
  (url: string, options?: RequestInit): Promise<any>;
}

class RpcClient {
  private baseUrl: string;
  private fetchMethod: FetchMethod;

  constructor(fetchMethod: FetchMethod, baseUrl: string = '/api') {
    this.fetchMethod = fetchMethod;
    this.baseUrl = baseUrl;
  }

  private async request(method: string, path: string, data?: any) {
    const url = `${this.baseUrl}${path}`;
    const options: RequestInit = {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    const response = await this.fetchMethod(url, options);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  }

  {% for view_name, view_data in views.items() %}
  // {{ view_name }} API methods
  {{ view_name.lower() }} = {
    {% for method in view_data.methods %}
    {% if method in ['list', 'retrieve'] %}
    {{ method }}: {
      query: (
        {% if view_data.params %}{{ view_data.params | join(', ') }}: string, {% endif %}
        {% if method == 'retrieve' and 'id' not in view_data.params %}id: string, {% endif %}
        options?: any
      ) => {
        return useQuery(
          ['{{ view_name.lower() }}', '{{ method }}'{% if view_data.params %}, {{ view_data.params | join(', ') }}{% endif %}{% if method == 'retrieve' and 'id' not in view_data.params %}, id{% endif %}],
          () => this.request(
            'GET',
            `{{ view_data['path'] }}{% if method == 'retrieve' and 'id' not in view_data.params %}${id}/{% endif %}`
          ),
          options
        );
      },
    },
    {% else %}
    {{ method }}: {
      mutation: (options?: any) => {
        return useMutation(
          ({% if view_data.params %}{{ view_data.params | join(', ') }}: string, {% endif %}data: any) =>
            this.request('{{ method | upper }}', `{{ view_data['path'] }}`, data),
          options
        );
      },
    },
    {% endif %}
    {% endfor %}
  };

  {% endfor %}
}

export default RpcClient;
